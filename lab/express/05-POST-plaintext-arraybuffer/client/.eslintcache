[{"/Users/Jing/Desktop/work/lab-react/lab/11-read-binary-file/client/src/App.tsx":"1","/Users/Jing/Desktop/work/lab-react/lab/11-read-binary-file/client/src/component/my-image.tsx":"2"},{"size":2940,"mtime":1624738685218,"results":"3","hashOfConfig":"4"},{"size":1123,"mtime":1624711655575,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"8"},"1lfkgdg",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Jing/Desktop/work/lab-react/lab/11-read-binary-file/client/src/App.tsx",["11","12","13"],"import React, { useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nasync function TestPostArrayBuffer(){\n  console.log('TestPostArrayBuffer');\n  const urlBinaryResourceApi:string = 'data/binary-resource';\n  var myArray = new ArrayBuffer(512);\n  var longInt8View = new Uint8Array(myArray);\n\n  // generate some data\n  for (var i=0; i< longInt8View.length; i++) {\n    longInt8View[i] = i % 256;\n  }\n\n  var xhr = new XMLHttpRequest;\n  xhr.open(\"POST\", urlBinaryResourceApi)//, true);\n  xhr.setRequestHeader('Content-Type', 'application/octet-stream'); \n  xhr.send(myArray);\n\n  console.log('[client] sent: myArray = ' + myArray);\n\n  // -- Server received headers (no content type) --\n  // header = {\"host\":\"localhost:9000\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0\",\"accept\":\"*/*\",\"accept-language\":\"en-US,en;q=0.5\",\"accept-encoding\":\"gzip, deflate\",\n  //           \"content-length\":\"512\",\"origin\":\"http://localhost:9000\",\"connection\":\"keep-alive\",\"referer\":\"http://localhost:9000/\",\"dnt\":\"1\",\"sec-gpc\":\"1\"}\n  xhrEventHandle(xhr);\n}\n\nasync function TestPostBlob(){\n  const urlBinaryResourceApi:string = 'data/binary-resource';\n  let xhr = new XMLHttpRequest();\n  xhr.open('Post', urlBinaryResourceApi);\n  var blob = new Blob(['abc123'], {type: 'text/plain'});\n  xhr.send(blob);\n  // -- Server received headers --\n  // header = {\"host\":\"localhost:9000\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0\",\"accept\":\"*/*\",\"accept-language\":\"en-US,en;q=0.5\",\"accept-encoding\":\"gzip, deflate\",\n  //          \"content-type\":\"text/plain\",\"content-length\":\"6\",\"origin\":\"http://localhost:9000\",\"connection\":\"keep-alive\",\"referer\":\"http://localhost:9000/\",\"dnt\":\"1\",\"sec-gpc\":\"1\"}\n\n  xhrEventHandle(xhr);\n}\n\n\n\nfunction App() {\n  const onTestPostBlob = TestPostBlob;\n  const onTestPostArrayBuffer = TestPostArrayBuffer;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p><Button onClick={onTestPostBlob} variant=\"contained\" color=\"primary\"> Test: Post Blob, type: 'text/plain' </Button></p>\n        <p><Button onClick={onTestPostArrayBuffer} variant=\"contained\" color=\"primary\"> Test: Post ArrayBuffer </Button></p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\nasync function xhrEventHandle(xhr:XMLHttpRequest){\n  xhr.onload = function() {\n    if (xhr.status != 200) { // HTTP error?\n      console.log('[client] Error: xhr.status != 200' + xhr.status)\n      return;\n    }\n    // get the response from xhr.response\n    console.log('[client] xhr.response = ' + xhr.response);\n  };\n  xhr.onprogress = function(event) {\n    var percentComplete = event.loaded / event.total * 100;\n    console.log(`[client] xhr progress ${percentComplete}% complete.`);\n  };\n\n  xhr.onerror = function() {\n    console.log('[client] handle non-HTTP error (e.g. network down)');\n  };\n}\n","/Users/Jing/Desktop/work/lab-react/lab/11-read-binary-file/client/src/component/my-image.tsx",["14"],{"ruleId":"15","severity":1,"message":"16","line":1,"column":17,"nodeType":"17","messageId":"18","endLine":1,"endColumn":25},{"ruleId":"19","severity":1,"message":"20","line":16,"column":13,"nodeType":"21","messageId":"22","endLine":16,"endColumn":31,"fix":"23"},{"ruleId":"24","severity":1,"message":"25","line":67,"column":20,"nodeType":"26","messageId":"27","endLine":67,"endColumn":22},{"ruleId":"28","severity":1,"message":"29","line":36,"column":11,"nodeType":"30","endLine":36,"endColumn":46},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"31","text":"32"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",[469,469],"()"]