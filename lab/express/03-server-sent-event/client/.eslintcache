[{"/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/index.tsx":"1","/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/reportWebVitals.ts":"2","/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/App.tsx":"3","/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/component/my-image.tsx":"4","/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/index.tsx":"5","/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/reportWebVitals.ts":"6","/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/App.tsx":"7","/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/component/my-image.tsx":"8"},{"size":500,"mtime":1624429397873,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1624429397873,"results":"11","hashOfConfig":"10"},{"size":1644,"mtime":1624506691495,"results":"12","hashOfConfig":"10"},{"size":1123,"mtime":1624506657055,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1624429397873,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1624429397873,"results":"16","hashOfConfig":"15"},{"size":1644,"mtime":1624506691495,"results":"17","hashOfConfig":"15"},{"size":1123,"mtime":1624506657055,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"148fzq3",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ckbjbg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/index.tsx",[],["39","40"],"/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/reportWebVitals.ts",[],"/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/App.tsx",["41","42"],"/home/jing/work/lab-react/lab/express/03-server-sent-event/client/src/component/my-image.tsx",["43"],"/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/index.tsx",[],["44","45"],"/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/reportWebVitals.ts",[],"/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/App.tsx",["46","47"],"import React, { useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport MyImage from './component/my-image';\n\nfunction App() {\n  // Create the Ref to your component\n  let myimage = React.createRef<MyImage>();\n  \n  const onStartSentEventFromServer = async () => {\n    console.log('onStartSentEventFromServer')\n    // const url = 'http://192.168.1.100:9000/statusAPI';  // ok\n    const url = 'statusAPI'; // ok \n    //const evtSource = new EventSource(url, { withCredentials: true } ); // ok\n    const evtSource = new EventSource(url); // ok\n    evtSource.onmessage = function(event) {\n      const strNum:string = JSON.parse(event.data).num;\n      let num:number = parseInt(strNum);\n      console.log('num = ' + num);\n      (myimage.current as MyImage).changeLight(num%3);\n\n      /* By default, if the connection between the client and server closes, the connection is restarted. The connection is terminated with the .close() method.\n      ref. https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\n      */\n      if (num == 20){\n        console.log('[Early Stop] entSource.close')\n        evtSource.close();\n      }\n    }\n    // intLightId = (intLightId + 1) % 2;\n    // (myimage.current as MyImage).changeLight(intLightId);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <MyImage ref = {myimage} /> \n          <Button onClick={onStartSentEventFromServer} variant=\"contained\" color=\"primary\"> Start to received event from Server </Button>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/jing/work/lab-react/lab/express/04-server-sent-event-server-update-status-by-get-post-api/client/src/component/my-image.tsx",["48"],"import React from 'react';\n\nimport greenlight from './res/greenlight-v3.png'\nimport yellowlight from './res/yellowlight-v3.png'\nimport redlight from './res/redlight-v3.png'\n\nclass MyImage extends React.Component {\n    GREEN_LIGHT = {id:0, strName:'green light', strLoc: greenlight};\n    YELLOW_LIGHT = {id:1, strName:'yellow light', strLoc: yellowlight};\n    RED_LIGHT = {id:2, strName:'red light', strLoc: redlight};\n\n    state = {\n      data : this.RED_LIGHT,\n    }\n\n    public changeLight = (_id:number) => {\n      switch(_id){\n        case 0: \n          this.setState({data : this.GREEN_LIGHT});\n          break;\n        case 1:\n          this.setState({data : this.YELLOW_LIGHT})\n          break;\n        case 2:\n          this.setState({data : this.RED_LIGHT});\n          break;\n        default:\n          alert('Invalid _id, changeLight, MyImage. _id = . Act: use Red Light as default' + _id);\n          this.setState({data : this.RED_LIGHT});\n      }\n    };\n\n    render() {\n      return (\n        <div>\n          <img src={this.state.data.strLoc} ></img>\n        </div>\n      );\n    }\n}\n\nexport default MyImage;\n\n\n\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":25,"column":15,"nodeType":"59","messageId":"60","endLine":25,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":36,"column":11,"nodeType":"63","endLine":36,"endColumn":46},{"ruleId":"49","replacedBy":"64"},{"ruleId":"51","replacedBy":"65"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":25,"column":15,"nodeType":"59","messageId":"60","endLine":25,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":36,"column":11,"nodeType":"63","endLine":36,"endColumn":46},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["66"],["67"],"no-global-assign","no-unsafe-negation"]