import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';

// (1) Define the state type where your the component included
export interface CounterState {
  value: number;            // (1) value: number
  status: 'idle' | 'loading' | 'failed'; // (2) status: 'idle' | 'loading' | 'failed'
}

// (2) The state initial value
const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// (3a) Async Example: Async update state logic (version: createAsyncThunk)
//     Create a thunk to perform async logic of action types
//     1. Input:
//        (a) Action type prefix: "counter/fetchCount"
//        (b) callback function: async logic
//     2. Export:
//        (a) Export a promise lifecycle action types
// Reference
// 1. https://redux-toolkit.js.org/api/createAsyncThunk
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount); // Wait for 0.5 sec to resolve the response.
    // The value we return becomes the `fulfilled` action payload
    return response.data; // <--- action.payload
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    // (5) Examples for update state based on associated actions
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },

    // (6) An example for update state using action payload
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // (7) Add extra reducers:
  //     Purpose: Add reducers for step (3a) that the actions generated by createAsyncThunk
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// (8) Define the selector functions
//     Purpose: Extract data from the Redux store state
export const selectCount = (state: RootState) => state.counter.value;
export const selectStatus = (state: RootState) => state.counter.status;

// (9) Async Example: Async update state logic (version: manual)
//     Purpose: Create a thunk to perform async logic of action types
export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));     // dispatch the incrementByAmount
  }
};

// (10) Export the component reducers
export default counterSlice.reducer;
